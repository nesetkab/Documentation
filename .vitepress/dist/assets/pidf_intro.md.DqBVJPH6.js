import{_ as e,c as n,a0 as t,o as i}from"./chunks/framework.D5XSuxOt.js";const h=JSON.parse('{"title":"Introduction to PID Tuning","description":"","frontmatter":{},"headers":[],"relativePath":"pidf/intro.md","filePath":"pidf/intro.md","lastUpdated":1738215628000}'),r={name:"pidf/intro.md"};function a(s,o,l,c,d,u){return i(),n("div",null,o[0]||(o[0]=[t('<h1 id="introduction-to-pid-tuning" tabindex="-1">Introduction to PID Tuning <a class="header-anchor" href="#introduction-to-pid-tuning" aria-label="Permalink to &quot;Introduction to PID Tuning&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>Pedro Pathing relies on <strong>Proportional-Integral-Derivative (PID)</strong> controllers to ensure precise path-following performance. This guide will walk you through tuning the various PID controllers for translational, heading, drive, and centripetal corrections.</p><h2 id="one-vs-two-pid-systems" tabindex="-1">One vs. Two PID Systems <a class="header-anchor" href="#one-vs-two-pid-systems" aria-label="Permalink to &quot;One vs. Two PID Systems&quot;">​</a></h2><p>In Pedro Pathing, you can choose between using one or two PID controllers for each correction type:</p><ol><li><p><strong>Single PID System (Default)</strong>:</p><ul><li>A single PID is responsible for managing all errors.</li><li>Recommended for simplicity and most use cases.</li></ul></li><li><p><strong>Two PID System</strong>:</p><ul><li>Includes a <strong>main PID</strong> for handling larger errors and a <strong>secondary PID</strong> for smaller corrections.</li><li>To enable this system: <ol><li>Open <code>FConstants</code>.</li><li>Set any of the following booleans to <code>true</code> by adding, in a new line in the <code>static{}</code> block: <ul><li><code>FollowerConstants.useSecondaryTranslationalPID = true</code></li><li><code>FollowerConstants.useSecondaryHeadingPID = true</code></li><li><code>FollowerConstants.useSecondaryDrivePID = true</code></li></ul></li><li>Tune both the main and secondary PIDs: <ul><li><strong>Main PID</strong>: Moves the error into the secondary PID’s range without causing overshoot.</li><li><strong>Secondary PID</strong>: Corrects small errors quickly and minimizes oscillations.</li></ul></li></ol></li></ul></li></ol><h2 id="tuning-steps-overview" tabindex="-1">Tuning Steps Overview <a class="header-anchor" href="#tuning-steps-overview" aria-label="Permalink to &quot;Tuning Steps Overview&quot;">​</a></h2><p>Each PID has a specific purpose and is tuned independently:</p><ol><li><strong>Translational PID</strong>: Maintains the robot on its path.</li><li><strong>Heading PID</strong>: Controls rotational alignment.</li><li><strong>Drive PID</strong>: Manages braking and acceleration along the path.</li><li><strong>Centripetal Force Correction</strong>: Corrects for deviations on curved paths.</li></ol><p>Proceed through the following sections to tune each PID.</p>',10)]))}const p=e(r,[["render",a]]);export{h as __pageData,p as default};
