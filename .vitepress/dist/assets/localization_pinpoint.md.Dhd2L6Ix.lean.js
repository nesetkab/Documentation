import{_ as e,c as t,a0 as a,o as n}from"./chunks/framework.D5XSuxOt.js";const u=JSON.parse('{"title":"Setting Up Your Pinpoint Localizer","description":"","frontmatter":{},"headers":[],"relativePath":"localization/pinpoint.md","filePath":"localization/pinpoint.md","lastUpdated":1737587633000}'),s={name:"localization/pinpoint.md"};function o(l,i,r,d,h,c){return n(),t("div",null,i[0]||(i[0]=[a(`<h1 id="setting-up-your-pinpoint-localizer" tabindex="-1">Setting Up Your Pinpoint Localizer <a class="header-anchor" href="#setting-up-your-pinpoint-localizer" aria-label="Permalink to &quot;Setting Up Your Pinpoint Localizer&quot;">​</a></h1><h2 id="prerequisites" tabindex="-1">Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;Prerequisites&quot;">​</a></h2><ul><li>Pinpoint module connected to an I2C port.</li><li>Dead wheel encoder wires properly connected to the Pinpoint module.</li></ul><h2 id="default-values" tabindex="-1">Default Values <a class="header-anchor" href="#default-values" aria-label="Permalink to &quot;Default Values&quot;">​</a></h2><p>These are the default values of the PinpointConstants. You can copy and paste this into your <code>static{}</code> block within <code>LConstants</code>:</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.forwardY </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.strafeX </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2.5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.distanceUnit </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DistanceUnit.INCH;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.hardwareMapName </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;pinpoint&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.useYawScalar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.yawScalar </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1.0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.useCustomEncoderResolution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.encoderResolution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoBildaPinpointDriver.GoBildaOdometryPods.goBILDA_4_BAR_POD;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.customEncoderResolution </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 13.26291192</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.forwardEncoderDirection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoBildaPinpointDriver.EncoderDirection.REVERSED;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    PinpointConstants.strafeEncoderDirection </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> GoBildaPinpointDriver.EncoderDirection.FORWARD;</span></span></code></pre></div><h2 id="steps" tabindex="-1">Steps <a class="header-anchor" href="#steps" aria-label="Permalink to &quot;Steps&quot;">​</a></h2><h3 id="_1-setup" tabindex="-1">1. Setup <a class="header-anchor" href="#_1-setup" aria-label="Permalink to &quot;1. Setup&quot;">​</a></h3><p>Navigate to the file <code>LConstants</code> and into the <code>static{}</code> block and configure the following:</p><ol><li>Pinpoint Port: <ul><li>Set the <code>PinpointConstants.hardwareMapName</code> variable to the name of the I2C port connected to the Pinpoint module.</li><li>Make sure that the I2C port is not the Control Hub built-in IMU port (port 0).</li></ul></li><li>Odometry Measurements: <ul><li>Input the <code>forwardY</code> and <code>strafeX</code> values. <ul><li>These values represent the distance of the odometry pods from the robot&#39;s center of rotation on the PEDRO <a href="./setup.html#robot-coordinate-grid">robot coordinate grid</a>.</li><li>Do NOT use GoBilda&#39;s diagram, but Pedro&#39;s, linked above.</li></ul></li><li>The default values are <code>1</code> for <code>forwardY</code> and <code>-2.5</code> for <code>strafeX</code>.</li><li>The default distance measurement is in inches, which can be changed by modifying the <code>Pinpoint.distanceUnit</code> variable.</li></ul></li><li>Encoder Resolution: <ul><li>By default, the encoder resolution is set to <code>GoBildaPinpointDriver.GoBildaOdometryPods.goBILDA_4_BAR_POD</code>.</li><li>If you are using a custom encoder resolution, set <code>PinpointConstants.useCustomEncoderResolution</code> to <code>true</code> and input the custom resolution in the <code>PinpointConstants.customEncoderResolution</code> variable.</li></ul></li><li>Encoder Directions: <ul><li>Ensure the encoder directions are correctly set. You can test this by running the <code>LocalizationTest</code> TeleOp Opmode. <ul><li>If the <code>x</code> value ticks down when the robot moves forward, invert the direction by changing the <code>GoBildaPinpointDriver.EncoderDirection</code> for the forwardEncoder.</li><li>If the <code>y</code> value ticks down when the robot moves left, invert the direction by changing the <code>GoBildaPinpointDriver.EncoderDirection</code> for the strafeEncoder.</li></ul></li><li>The default values are <code>GoBildaPinpointDriver.EncoderDirection.REVERSED</code> for <code>forwardEncoderDirection</code> and <code>GoBildaPinpointDriver.EncoderDirection.FORWARD</code> for <code>strafeEncoderDirection</code>.</li></ul></li><li>Yaw Scalar: <ul><li>If you want to use a yaw scalar, set <code>PinpointConstants.useYawScalar</code> to <code>true</code> and input the scalar value in the <code>PinpointConstants.yawScalar</code> variable.</li><li>Note: The Yaw Scalar overrides the calibration done by GoBilda. It is recommended to use leave <code>PinpointConstants.useYawScalar</code> as <code>false</code> unless you have a specific reason to change it.</li></ul></li></ol><h3 id="_2-verifying-pinpoint-connection" tabindex="-1">2. Verifying Pinpoint Connection <a class="header-anchor" href="#_2-verifying-pinpoint-connection" aria-label="Permalink to &quot;2. Verifying Pinpoint Connection&quot;">​</a></h3><p>Run the <code>SensorGoBildaPinpointExample.java</code> file located in the <code>tuners</code> folder. This will ensure the Pinpoint is correctly connected and operational.</p><h2 id="testing-your-localizer" tabindex="-1">Testing Your Localizer <a class="header-anchor" href="#testing-your-localizer" aria-label="Permalink to &quot;Testing Your Localizer&quot;">​</a></h2><p>After completing the tuning steps, you can test your localizer&#39;s accuracy.</p><ol><li><p>Go to <code>Localization Test</code> and drive your robot around.</p></li><li><p>Open the FTC Dashboard at <a href="http://192.168.43.1:8080/dash" target="_blank" rel="noreferrer">http://192.168.43.1:8080/dash</a>.</p></li><li><p>Switch the view to &quot;field view&quot; from the top right corner dropdown.</p></li><li><p>The dashboard should display the robot&#39;s position on the field.</p></li><li><p>Observe the movements, moving the robot forward should make <code>x</code> increase and strafing left should make <code>y</code> increase.</p></li></ol><h2 id="congratulations-on-successfully-setting-up-your-localizer" tabindex="-1">Congratulations on successfully setting up your localizer! <a class="header-anchor" href="#congratulations-on-successfully-setting-up-your-localizer" aria-label="Permalink to &quot;Congratulations on successfully setting up your localizer!&quot;">​</a></h2>`,16)]))}const k=e(s,[["render",o]]);export{u as __pageData,k as default};
