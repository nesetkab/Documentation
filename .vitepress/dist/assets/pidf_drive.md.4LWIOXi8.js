import{_ as t,c as o,a0 as a,o as i}from"./chunks/framework.D5XSuxOt.js";const p=JSON.parse('{"title":"Tuning the Drive PID","description":"","frontmatter":{},"headers":[],"relativePath":"pidf/drive.md","filePath":"pidf/drive.md","lastUpdated":1738305056000}'),n={name:"pidf/drive.md"};function r(l,e,s,d,c,u){return i(),o("div",null,e[0]||(e[0]=[a('<h1 id="tuning-the-drive-pid" tabindex="-1">Tuning the Drive PID <a class="header-anchor" href="#tuning-the-drive-pid" aria-label="Permalink to &quot;Tuning the Drive PID&quot;">​</a></h1><h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><p>The drive PID manages acceleration and braking along a path, ensuring smooth motion and minimizing overshoot.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><ol><li>Open FTC Dashboard and go to the <strong>Follower</strong> tab.</li><li>Enable <code>useDrive</code>, <code>useHeading</code>, and <code>useTranslational</code>.</li><li>Run the <code>StraightBackAndForth</code> OpMode.</li><li>Ensure the timer for autonomous OpModes is <strong>disabled</strong>.</li></ol><h2 id="zero-power-acceleration-multiplier" tabindex="-1">Zero Power Acceleration Multiplier <a class="header-anchor" href="#zero-power-acceleration-multiplier" aria-label="Permalink to &quot;Zero Power Acceleration Multiplier&quot;">​</a></h2><ol><li>Open the <code>FConstants</code> class and navigate to the <code>static{}</code> block.</li><li>Set the <code>zeroPowerAccelerationMultiplier</code> on a new line by adding <code>FollowerConstants.zeroPowerAccelerationMultiplier = [VALUE]</code>, where <code>[VALUE]</code> is the value you want to set it to.</li></ol><p>Note: In Step 2, you only need to make a new line if you are not using the quickstart, otherwise, you can just modify the line that already does this.</p><p>This value determines deceleration speed:</p><ul><li>Higher values: Faster braking but more oscillations.</li><li>Lower values: Slower braking with fewer oscillations.</li></ul><h2 id="tuning-process" tabindex="-1">Tuning Process <a class="header-anchor" href="#tuning-process" aria-label="Permalink to &quot;Tuning Process&quot;">​</a></h2><ol><li><p>Adjust the PID constants (<code>drivePIDF</code>) in the <strong>FollowerConstants</strong> tab of FTC Dashboard.</p><ul><li><strong>Proportional (P)</strong>: Start with very low values (e.g., hundredths or thousandths).</li><li><strong>Derivative (D)</strong>: Use small values (e.g., hundred-thousandths or millionths).</li><li><strong>Integral (I)</strong>: Avoid using this term; it can cause accumulated errors and oscillations.</li></ul></li><li><p>Test the response during braking:</p><ul><li>Reduce oscillations for smoother stops.</li></ul></li></ol><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>Repeat the tuning process with varying rotation angles and directions to ensure consistent performance.</p><h2 id="input-tuned-values" tabindex="-1">Input Tuned Values <a class="header-anchor" href="#input-tuned-values" aria-label="Permalink to &quot;Input Tuned Values&quot;">​</a></h2><ol><li>Open the <code>FConstants</code> class and navigate to the <code>static{}</code> block.</li><li>Then, on a new line, add <code>FollowerConstants.drivePIDFCoefficients.setCoefficients(P,I,D,T,F);</code>, with <code>P</code>, <code>I</code>, <code>D</code>, <code>T</code>, and <code>F</code> being the values you tuned for and inputted into FTC Dashboard.</li></ol><p>Note: In Step 2, you only need to make a new line if you are not using the quickstart, otherwise, you can just modify the line that already does this.</p><h2 id="secondary-pidf-tuning" tabindex="-1">Secondary PIDF Tuning <a class="header-anchor" href="#secondary-pidf-tuning" aria-label="Permalink to &quot;Secondary PIDF Tuning&quot;">​</a></h2><p>If you are going to use the secondary PIDF for drive error, you can tune the secondary PIDF coefficients by following the same process as the primary PIDF coefficients.</p><p>Input them into the <code>FollowerConstants.secondaryDrivePIDFCoefficients</code> in the <code>FConstants</code> class the same way that the primary PIDF coefficients are inputted.</p><h2 id="kalman-filter-adjustments-optional" tabindex="-1">Kalman Filter Adjustments (Optional) <a class="header-anchor" href="#kalman-filter-adjustments-optional" aria-label="Permalink to &quot;Kalman Filter Adjustments (Optional)&quot;">​</a></h2><p>The drive PID uses a Kalman filter to smooth error responses:</p><ul><li>Model Covariance: Default is <code>6</code>.</li><li>Data Covariance: Default is <code>1</code>.</li><li>Adjust the time constant (default <code>0.6</code>) to change the weighted average of derivatives.</li></ul><p>Feel free to experiment with these settings for optimal performance.</p><h4 id="congratulations-you-ve-completed-the-drive-pidf-tuning" tabindex="-1">Congratulations, you’ve completed the drive PIDF tuning! <a class="header-anchor" href="#congratulations-you-ve-completed-the-drive-pidf-tuning" aria-label="Permalink to &quot;Congratulations, you’ve completed the drive PIDF tuning!&quot;">​</a></h4><p>Now, move onto the next section to tune your Centripetal Scaling.</p>',26)]))}const g=t(n,[["render",r]]);export{p as __pageData,g as default};
