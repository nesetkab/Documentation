import{_ as t,c as o,a0 as a,o as r}from"./chunks/framework.D5XSuxOt.js";const p=JSON.parse('{"title":"Forward Velocity Tuner","description":"","frontmatter":{},"headers":[],"relativePath":"automatic/forwardvelocity.md","filePath":"automatic/forwardvelocity.md","lastUpdated":1737258773000}'),n={name:"automatic/forwardvelocity.md"};function i(l,e,s,d,u,c){return r(),o("div",null,e[0]||(e[0]=[a('<h1 id="forward-velocity-tuner" tabindex="-1">Forward Velocity Tuner <a class="header-anchor" href="#forward-velocity-tuner" aria-label="Permalink to &quot;Forward Velocity Tuner&quot;">​</a></h1><h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><p>The <strong>Forward Velocity Tuner</strong> determines the velocity of your robot when moving forward at full power. This value is used for accurate path-following calculations in Pedro Pathing.</p><h2 id="setup-and-instructions" tabindex="-1">Setup and Instructions <a class="header-anchor" href="#setup-and-instructions" aria-label="Permalink to &quot;Setup and Instructions&quot;">​</a></h2><ol><li>Open the <code>ForwardVelocityTuner.java</code> OpMode.</li><li>Ensure your robot has enough space to drive <strong>40 inches</strong> forward. You can adjust this distance in the FTC Dashboard under the <code>ForwardVelocityTuner</code> dropdown, but larger distances yield better results.</li><li>Run the OpMode.</li></ol><h2 id="output" tabindex="-1">Output <a class="header-anchor" href="#output" aria-label="Permalink to &quot;Output&quot;">​</a></h2><ul><li><strong>Velocity</strong>: After the robot has completed the distance, the final velocity will be displayed in telemetry.</li><li>Note: The robot may drift slightly after completing the movement. Ensure the testing area has adequate space.</li></ul><h2 id="inputting-the-results" tabindex="-1">Inputting the Results <a class="header-anchor" href="#inputting-the-results" aria-label="Permalink to &quot;Inputting the Results&quot;">​</a></h2><ol><li>Open the <code>FConstants</code> class and navigate to the <code>static{}</code> block.</li><li>Then, on a new line, add <code>FollowerConstants.xMovement = [OUTPUT]</code>, with <code>[OUTPUT]</code> being the velocity output from the tuner.</li></ol><p>Note: In Step 2, you only need to make a new line if you are not using the quickstart, otherwise, you can just modify the line that already does this.</p><h4 id="congratulations-you-ve-completed-the-forward-velocity-tuning" tabindex="-1">Congratulations, you’ve completed the forward velocity tuning! <a class="header-anchor" href="#congratulations-you-ve-completed-the-forward-velocity-tuning" aria-label="Permalink to &quot;Congratulations, you’ve completed the forward velocity tuning!&quot;">​</a></h4>',11)]))}const f=t(n,[["render",i]]);export{p as __pageData,f as default};
