import{_ as t,c as n,a0 as o,o as a}from"./chunks/framework.D5XSuxOt.js";const g=JSON.parse('{"title":"Tuning the Heading PID","description":"","frontmatter":{},"headers":[],"relativePath":"pidf/heading.md","filePath":"pidf/heading.md","lastUpdated":1738215628000}'),i={name:"pidf/heading.md"};function s(r,e,d,l,h,c){return a(),n("div",null,e[0]||(e[0]=[o('<h1 id="tuning-the-heading-pid" tabindex="-1">Tuning the Heading PID <a class="header-anchor" href="#tuning-the-heading-pid" aria-label="Permalink to &quot;Tuning the Heading PID&quot;">​</a></h1><h2 id="purpose" tabindex="-1">Purpose <a class="header-anchor" href="#purpose" aria-label="Permalink to &quot;Purpose&quot;">​</a></h2><p>The heading PID ensures the robot maintains its rotational alignment, correcting deviations from its desired heading.</p><h2 id="setup" tabindex="-1">Setup <a class="header-anchor" href="#setup" aria-label="Permalink to &quot;Setup&quot;">​</a></h2><ol><li>Open FTC Dashboard and go to the <strong>Follower</strong> tab.</li><li>Enable <code>useHeading</code> and disable all other checkboxes.</li><li>Run the <code>StraightBackAndForth</code> OpMode.</li><li>Ensure the timer for autonomous OpModes is <strong>disabled</strong>.</li></ol><h2 id="tuning-process" tabindex="-1">Tuning Process <a class="header-anchor" href="#tuning-process" aria-label="Permalink to &quot;Tuning Process&quot;">​</a></h2><ol><li>Rotate the robot manually from one corner and observe its correction response. <ul><li>The robot should correct its heading smoothly without moving laterally.</li></ul></li><li>Adjust the PID constants (<code>headingPIDF</code>) in the <strong>FollowerConstants</strong> tab of FTC Dashboard. <ul><li><strong>Goal</strong>: Reduce oscillations while maintaining precise alignment.</li></ul></li></ol><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-label="Permalink to &quot;Testing&quot;">​</a></h2><p>Repeat the tuning process with varying rotation angles and directions to ensure consistent performance.</p><h2 id="input-tuned-values" tabindex="-1">Input Tuned Values <a class="header-anchor" href="#input-tuned-values" aria-label="Permalink to &quot;Input Tuned Values&quot;">​</a></h2><ol><li>Open the <code>FConstants</code> class and navigate to the <code>static{}</code> block.</li><li>Then, on a new line, add <code>FollowerConstants.headingPIDFCoefficients.setCoefficients(P,I,D,F);</code>, with <code>P</code>, <code>I</code>, <code>D</code>, and <code>F</code> being the values you tuned for and inputted into FTC Dashboard.</li></ol><p>Note: In Step 2, you only need to make a new line if you are not using the quickstart, otherwise, you can just modify the line that already does this.</p><h2 id="secondary-pidf-tuning" tabindex="-1">Secondary PIDF Tuning <a class="header-anchor" href="#secondary-pidf-tuning" aria-label="Permalink to &quot;Secondary PIDF Tuning&quot;">​</a></h2><p>If you are going to use the secondary PIDF for heading error, you can tune the secondary PIDF coefficients by following the same process as the primary PIDF coefficients.</p><p>Input them into the <code>FollowerConstants.secondaryHeadingPIDFCoefficients</code> in the <code>FConstants</code> class the same way that the primary PIDF coefficients are inputted.</p><h4 id="congratulations-you-ve-completed-the-heading-pidf-tuning" tabindex="-1">Congratulations, you’ve completed the Heading PIDF tuning! <a class="header-anchor" href="#congratulations-you-ve-completed-the-heading-pidf-tuning" aria-label="Permalink to &quot;Congratulations, you’ve completed the Heading PIDF tuning!&quot;">​</a></h4><p>Now, move onto the next section to tune your Drive PIDF Tuning.</p>',17)]))}const p=t(i,[["render",s]]);export{g as __pageData,p as default};
